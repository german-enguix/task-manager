-- Script MEJORADO para migrar assigned_to de UUID √∫nico a UUID array
-- Maneja dependencias de RLS policies correctamente

-- ===============================
-- MIGRACI√ìN ASSIGNED_TO ‚Üí ARRAY (MEJORADA)
-- ===============================

DO $$
DECLARE
    task_record RECORD;
    backup_count INTEGER;
    policy_record RECORD;
BEGIN
    RAISE NOTICE 'üîÑ INICIANDO MIGRACI√ìN MEJORADA: assigned_to UUID ‚Üí UUID[]';
    RAISE NOTICE 'üîß Manejando dependencias de RLS policies...';
    
    -- PASO 1: Verificar estado actual
    SELECT COUNT(*) INTO backup_count FROM tasks WHERE assigned_to IS NOT NULL;
    RAISE NOTICE 'üìä Tareas con assigned_to actual: %', backup_count;
    
    -- PASO 2: Crear columna temporal para backup
    RAISE NOTICE 'üíæ Creando backup de datos actuales...';
    
    ALTER TABLE tasks ADD COLUMN IF NOT EXISTS assigned_to_backup UUID;
    
    -- Hacer backup de los datos actuales
    UPDATE tasks 
    SET assigned_to_backup = assigned_to 
    WHERE assigned_to IS NOT NULL;
    
    RAISE NOTICE '‚úÖ Backup completado';
    
    -- PASO 3: ELIMINAR POL√çTICAS DEPENDIENTES
    RAISE NOTICE 'üóëÔ∏è Eliminando pol√≠ticas RLS dependientes...';
    
    -- Eliminar pol√≠ticas de task_comments que dependen de assigned_to
    DROP POLICY IF EXISTS task_comments_all_own_tasks ON task_comments;
    RAISE NOTICE '   ‚úÖ Eliminada: task_comments_all_own_tasks';
    
    DROP POLICY IF EXISTS task_comments_policy ON task_comments;
    RAISE NOTICE '   ‚úÖ Eliminada: task_comments_policy';
    
    -- Eliminar pol√≠ticas de task_problem_reports que dependen de assigned_to
    DROP POLICY IF EXISTS task_problem_reports_select_own_tasks ON task_problem_reports;
    RAISE NOTICE '   ‚úÖ Eliminada: task_problem_reports_select_own_tasks';
    
    DROP POLICY IF EXISTS task_problem_reports_insert_own_tasks ON task_problem_reports;
    RAISE NOTICE '   ‚úÖ Eliminada: task_problem_reports_insert_own_tasks';
    
    -- Eliminar cualquier otra pol√≠tica que pueda depender de assigned_to
    DROP POLICY IF EXISTS tasks_select_policy ON tasks;
    DROP POLICY IF EXISTS tasks_insert_policy ON tasks;
    DROP POLICY IF EXISTS tasks_update_policy ON tasks;
    DROP POLICY IF EXISTS tasks_delete_policy ON tasks;
    
    RAISE NOTICE 'üîì Pol√≠ticas dependientes eliminadas';
    
    -- PASO 4: Eliminar columna actual y recrear como array
    RAISE NOTICE 'üîÑ Recreando columna como array...';
    
    ALTER TABLE tasks DROP COLUMN assigned_to;
    ALTER TABLE tasks ADD COLUMN assigned_to UUID[];
    
    -- PASO 5: Migrar datos del backup al nuevo formato array
    RAISE NOTICE 'üì¶ Migrando datos a formato array...';
    
    UPDATE tasks 
    SET assigned_to = ARRAY[assigned_to_backup]
    WHERE assigned_to_backup IS NOT NULL;
    
    -- PASO 6: Verificar migraci√≥n
    SELECT COUNT(*) INTO backup_count FROM tasks WHERE assigned_to IS NOT NULL AND array_length(assigned_to, 1) > 0;
    RAISE NOTICE '‚úÖ Tareas migradas con assigned_to array: %', backup_count;
    
    -- PASO 7: Crear √≠ndices para el nuevo array
    RAISE NOTICE 'üìä Creando √≠ndices para arrays...';
    
    -- √çndice GIN para b√∫squedas eficientes en arrays
    CREATE INDEX IF NOT EXISTS idx_tasks_assigned_to_gin 
    ON tasks USING gin(assigned_to);
    
    RAISE NOTICE '‚úÖ √çndices creados';
    
    -- PASO 8: RECREAR POL√çTICAS RLS CON SOPORTE PARA ARRAYS
    RAISE NOTICE 'üîê Recreando pol√≠ticas RLS con soporte para arrays...';
    
    -- Pol√≠tica b√°sica para tasks: usuarios pueden ver tareas asignadas a ellos
    CREATE POLICY tasks_select_policy ON tasks
    FOR SELECT
    USING (
        auth.uid() = ANY(assigned_to) 
        OR auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para insertar tasks (solo admins)
    CREATE POLICY tasks_insert_policy ON tasks
    FOR INSERT
    WITH CHECK (
        auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para actualizar tasks (usuarios asignados + admins)
    CREATE POLICY tasks_update_policy ON tasks
    FOR UPDATE
    USING (
        auth.uid() = ANY(assigned_to)
        OR auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para task_comments: usuarios pueden ver comentarios de sus tareas
    CREATE POLICY task_comments_select_policy ON task_comments
    FOR SELECT
    USING (
        auth.uid() IN (
            SELECT unnest(assigned_to) FROM tasks WHERE tasks.id = task_comments.task_id
        )
        OR auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para insertar comentarios: usuarios asignados a la tarea
    CREATE POLICY task_comments_insert_policy ON task_comments
    FOR INSERT
    WITH CHECK (
        auth.uid() IN (
            SELECT unnest(assigned_to) FROM tasks WHERE tasks.id = task_comments.task_id
        )
        OR auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para task_problem_reports: usuarios pueden ver reportes de sus tareas
    CREATE POLICY task_problem_reports_select_policy ON task_problem_reports
    FOR SELECT
    USING (
        auth.uid() = user_id  -- El autor del reporte
        OR auth.uid() IN (
            SELECT unnest(assigned_to) FROM tasks WHERE tasks.id = task_problem_reports.task_id
        )
        OR auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para insertar reportes: usuarios asignados a la tarea
    CREATE POLICY task_problem_reports_insert_policy ON task_problem_reports
    FOR INSERT
    WITH CHECK (
        auth.uid() IN (
            SELECT unnest(assigned_to) FROM tasks WHERE tasks.id = task_problem_reports.task_id
        )
        OR auth.uid() IN (
            SELECT id FROM auth.users WHERE auth.jwt() ->> 'role' = 'admin'
        )
    );
    
    -- Pol√≠tica para actualizar reportes: solo el autor
    CREATE POLICY task_problem_reports_update_policy ON task_problem_reports
    FOR UPDATE
    USING (auth.uid() = user_id);
    
    -- Pol√≠tica para eliminar reportes: solo el autor
    CREATE POLICY task_problem_reports_delete_policy ON task_problem_reports
    FOR DELETE
    USING (auth.uid() = user_id);
    
    RAISE NOTICE 'üîê Pol√≠ticas RLS recreadas con soporte para arrays';
    
    -- PASO 9: Limpiar columna temporal (opcional - mantener por seguridad)
    RAISE NOTICE 'üí° Columna assigned_to_backup mantenida para seguridad';
    
    RAISE NOTICE '‚úÖ MIGRACI√ìN COMPLETADA EXITOSAMENTE';
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ CAMBIOS REALIZADOS:';
    RAISE NOTICE '   ‚Ä¢ assigned_to ahora es UUID[] (array)';
    RAISE NOTICE '   ‚Ä¢ Datos existentes migrados autom√°ticamente';
    RAISE NOTICE '   ‚Ä¢ √çndices GIN creados para performance';
    RAISE NOTICE '   ‚Ä¢ Pol√≠ticas RLS actualizadas para arrays';
    RAISE NOTICE '   ‚Ä¢ Backup en assigned_to_backup (eliminar despu√©s)';
    RAISE NOTICE '';
    RAISE NOTICE 'üîê POL√çTICAS RLS ACTUALIZADAS:';
    RAISE NOTICE '   ‚Ä¢ Usuarios ven tareas donde est√°n en assigned_to array';
    RAISE NOTICE '   ‚Ä¢ Comentarios visibles para usuarios asignados';
    RAISE NOTICE '   ‚Ä¢ Reportes visibles para asignados + autor';
    RAISE NOTICE '   ‚Ä¢ Soporte completo para m√∫ltiples usuarios';
    RAISE NOTICE '';
    RAISE NOTICE 'üíª ACTUALIZAR C√ìDIGO:';
    RAISE NOTICE '   ‚Ä¢ TypeScript: assigned_to: string[] | null';
    RAISE NOTICE '   ‚Ä¢ Consultas: WHERE user_id = ANY(assigned_to)';
    RAISE NOTICE '   ‚Ä¢ Filtros: array_contains(assigned_to, user_id)';
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚ùå ERROR EN MIGRACI√ìN: %', SQLERRM;
        RAISE NOTICE 'üîÑ Las pol√≠ticas eliminadas necesitan ser recreadas manualmente';
        RAISE NOTICE 'üíæ Datos preservados en assigned_to_backup';
        RAISE;
END $$;

-- ===============================
-- VERIFICACI√ìN POST-MIGRACI√ìN
-- ===============================

-- Verificar que las pol√≠ticas existen
SELECT 
    schemaname, 
    tablename, 
    policyname, 
    cmd
FROM pg_policies 
WHERE tablename IN ('tasks', 'task_comments', 'task_problem_reports')
ORDER BY tablename, policyname;

-- Verificar datos migrados
SELECT 
    'Tareas con assigned_to array' as descripcion,
    COUNT(*) as cantidad
FROM tasks 
WHERE assigned_to IS NOT NULL;

-- Verificar backup
SELECT 
    'Tareas en backup' as descripcion,
    COUNT(*) as cantidad
FROM tasks 
WHERE assigned_to_backup IS NOT NULL; 