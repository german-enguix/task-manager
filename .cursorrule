# üìã Reglas de Desarrollo - Tasks Concept

## üö® REGLAS OBLIGATORIAS

### 1. React Native Paper - USO EXCLUSIVO
- **OBLIGATORIO**: Solo usar componentes de React Native Paper
- **PROHIBIDO**: Usar componentes b√°sicos de React Native para UI (Text, Button, TextInput, etc.)
- **PERMITIDO**: Solo View, ScrollView, SafeAreaView, StatusBar de React Native core

### 2. Componentes Permitidos
```typescript
// ‚úÖ USAR SIEMPRE
import { 
  Button, Card, TextInput, Chip, Text, Surface, 
  Appbar, FAB, List, Dialog, Snackbar, etc.
} from 'react-native-paper';

// ‚úÖ COMPONENTES DEL PROYECTO
import { 
  PaperButtonComponent, PaperCard, PaperInput, PaperChip 
} from '@/components';

// ‚úÖ REACT NATIVE CORE - SOLO ESTRUCTURALES
import { View, ScrollView, SafeAreaView, StatusBar } from 'react-native';
```

### 3. Componentes Prohibidos
```typescript
// ‚ùå NUNCA USAR
import { Text, Button, TextInput } from 'react-native';
import { Header } from 'react-native-elements';
import { Container } from 'native-base';

// ‚ùå NUNCA CREAR CUSTOM COMPONENTS SIN PAPER
const CustomButton = () => <TouchableOpacity>...</TouchableOpacity>;
```

### 4. Sistema de Espaciado OBLIGATORIO
```typescript
// ‚úÖ USAR SIEMPRE
import { SPACING, LAYOUT } from '@/constants';

// Espaciado disponible:
SPACING = {
  xs: 4,    // 4dp - micro espacios
  sm: 8,    // 8dp - peque√±o
  md: 16,   // 16dp - medio (base)
  lg: 24,   // 24dp - grande
  xl: 32,   // 32dp - extra grande
  xxl: 40,  // 40dp - secciones principales
}

// ‚ùå NUNCA hardcodear espaciado
style={{ margin: 20, padding: 15 }}

// ‚úÖ USAR SIEMPRE constantes
style={{ margin: SPACING.md, padding: SPACING.lg }}
```

### 5. Uso del Tema
```typescript
// ‚úÖ USAR SIEMPRE
import { useTheme } from 'react-native-paper';

const theme = useTheme();
// Usar theme.colors.primary, theme.colors.surface, etc.

// ‚ùå NUNCA colores hardcodeados
style={{ backgroundColor: '#007AFF' }}

// ‚úÖ USAR tema din√°mico
style={{ backgroundColor: theme.colors.primary }}
```

### 5.1 Tokens MD3 soportados (React Native Paper)
- Usar SOLO claves soportadas por Paper MD3 en `theme.colors`:
  - primary, onPrimary, primaryContainer, onPrimaryContainer
  - secondary, onSecondary, secondaryContainer, onSecondaryContainer
  - tertiary, onTertiary, tertiaryContainer, onTertiaryContainer
  - error, onError, errorContainer, onErrorContainer
  - background, onBackground
  - surface, onSurface, surfaceVariant, onSurfaceVariant
  - outline, outlineVariant
  - inverseSurface, inverseOnSurface, inversePrimary
  - shadow, scrim

- NO usar (no existen en Paper y rompen tipos):
  - surfaceTint
  - surfaceContainer, surfaceContainerLow, surfaceContainerLowest, surfaceContainerHigh, surfaceContainerHighest, surfaceBright, surfaceDim
  - primaryFixed*, secondaryFixed*, tertiaryFixed*, on*Fixed*

### 5.2 Convenciones del tema azul (MD3)
- Cards
  - elevated: background = colors.surface; border = none
  - outlined: background = colors.surface; borderColor = colors.outlineVariant
  - filled: background = colors.surfaceVariant
- Buttons
  - contained: buttonColor = colors.primary; textColor = colors.onPrimary
  - outlined: borderColor = colors.outline; textColor = colors.primary
  - text: textColor = colors.primary
- Chips
  - filled: background = colors.secondaryContainer; text = colors.onSecondaryContainer
  - outlined: borderColor = colors.outline
- Inputs (outlined)
  - outlineColor = colors.outline; activeOutlineColor = colors.primary
  - textColor = colors.onSurface; placeholderTextColor = colors.onSurfaceVariant
- NavBar/TabBar
  - background = colors.surface; borderTopColor = colors.outlineVariant
- List items destacados: background = colors.secondaryContainer; text = colors.onSecondaryContainer
- Dividers/bordes sutiles: colors.outline
- Texto secundario/ayudas: colors.onSurfaceVariant

### 5.3 Origen del tema y cambios
- El tema se define en `src/constants/theme.ts` usando la paleta azul (blue-task).
- Los objetos `brandLightColors` y `brandDarkColors` est√°n tipados con `satisfies Partial<typeof MD3LightTheme.colors>` para validar claves.
- Cualquier cambio de color debe hacerse en `src/constants/theme.ts`. No hardcodear colores en componentes.

## üì± TEMPLATES OBLIGATORIOS

### Template para Pantallas
```typescript
import React from 'react';
import { ScrollView, StyleSheet } from 'react-native';
import { Surface, Text, useTheme } from 'react-native-paper';
import { SPACING, LAYOUT } from '@/constants';

export const ExampleScreen: React.FC = () => {
  const theme = useTheme();

  return (
    <Surface style={styles.container}>
      <Surface style={styles.header} elevation={4}>
        <Text variant="headlineSmall">T√≠tulo</Text>
      </Surface>

      <ScrollView 
        style={styles.content}
        contentContainerStyle={styles.contentContainer}
      >
        {/* Contenido */}
      </ScrollView>
    </Surface>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  header: LAYOUT.header,
  content: { flex: 1 },
  contentContainer: LAYOUT.scrollContent,
});
```

### Template para Componentes
```typescript
import React from 'react';
import { StyleSheet } from 'react-native';
import { ComponentName, ComponentNameProps } from 'react-native-paper';
import { SPACING } from '@/constants';

interface CustomComponentProps extends ComponentNameProps {
  // Props espec√≠ficas
}

export const CustomComponent: React.FC<CustomComponentProps> = ({
  style,
  ...props
}) => {
  return (
    <ComponentName
      style={[styles.container, style]}
      {...props}
    />
  );
};

const styles = StyleSheet.create({
  container: {
    margin: SPACING.md,
  },
});
```

## üîç CHECKLIST OBLIGATORIO

### Antes de Crear Componente:
- [ ] ¬øExiste componente Paper equivalente?
- [ ] ¬øExtiende props del componente Paper base?
- [ ] ¬øUsa sistema de espaciado SPACING?
- [ ] ¬øTiene tipado TypeScript completo?
- [ ] ¬øUsa tema din√°mico con useTheme()?

### Antes de Crear Pantalla:
- [ ] ¬øUsa template de pantalla est√°ndar?
- [ ] ¬øTiene Surface como contenedor principal?
- [ ] ¬øHeader con elevaci√≥n apropiada?
- [ ] ¬øScrollView con contentContainerStyle?
- [ ] ¬øUsa variantes tipogr√°ficas Paper?

### Antes de Commit:
- [ ] ¬øTodos los componentes usan Paper?
- [ ] ¬øNo hay componentes RN b√°sicos para UI?
- [ ] ¬øEspaciado usa constantes SPACING?
- [ ] ¬øColores usan tema din√°mico?
- [ ] ¬øC√≥digo tipado correctamente?

## üìè ESPACIADO ESTANDARIZADO

### Reglas de Espaciado:
- **Entre secciones**: `SPACING.xl` (32dp)
- **Entre elementos relacionados**: `SPACING.md` (16dp)
- **Entre elementos lista**: `SPACING.sm` (8dp)
- **Padding contenedores**: `SPACING.md` (16dp)
- **Padding secciones**: `SPACING.lg` (24dp)
- **Touch targets**: m√≠nimo 48dp

### Layouts Predefinidos:
```typescript
// ‚úÖ USAR SIEMPRE que sea posible
LAYOUT = {
  container: { paddingHorizontal: 16, paddingVertical: 24 },
  card: { padding: 16, marginBottom: 16 },
  button: { marginVertical: 8, minHeight: 48 },
  header: { paddingHorizontal: 16, paddingVertical: 24, elevation: 4 },
  scrollContent: { padding: 16, gap: 16 },
}
```

## üö´ ANTIPATRONES - NUNCA HACER

```typescript
// ‚ùå Componentes RN b√°sicos para UI
<Text>Mi texto</Text>
<Button title="Click" />
<TextInput placeholder="Input" />

// ‚ùå Componentes custom sin Paper
const MyButton = () => <TouchableOpacity>...</TouchableOpacity>;

// ‚ùå Espaciado hardcodeado
style={{ margin: 20, padding: 15 }}

// ‚ùå Colores hardcodeados
style={{ backgroundColor: '#007AFF' }}

// ‚ùå No usar tema
const styles = StyleSheet.create({
  text: { color: '#000000' }
});
```

## ‚úÖ BUENAS PR√ÅCTICAS - SIEMPRE HACER

```typescript
// ‚úÖ Componentes Paper
<Text variant="bodyLarge">Mi texto</Text>
<Button mode="contained">Click</Button>
<TextInput placeholder="Input" />

// ‚úÖ Wrappers tipados de Paper
const MyButton = (props) => <Button {...props} />;

// ‚úÖ Espaciado estandarizado
style={{ margin: SPACING.md, padding: SPACING.lg }}

// ‚úÖ Colores del tema
const theme = useTheme();
style={{ backgroundColor: theme.colors.primary }}

// ‚úÖ Usar tema din√°mico
const styles = StyleSheet.create({
  // Aplicar colores en render con theme
});
```

## üìö DOCUMENTACI√ìN OBLIGATORIA

- **Material Design 3**: https://m3.material.io/
- **React Native Paper**: https://callstack.github.io/react-native-paper/
- **Archivo reglas**: `DEVELOPMENT_RULES.md`

## üîß FUNCIONES HELPER

```typescript
// ‚úÖ Validar componente antes de crear
const isValidComponent = (component) => {
  return component.extends === 'react-native-paper' || 
         component.isWrapper === true;
};

// ‚úÖ Aplicar espaciado consistente
const applySpacing = (type: 'section' | 'element' | 'list') => {
  switch (type) {
    case 'section': return SPACING.xl;
    case 'element': return SPACING.md;
    case 'list': return SPACING.sm;
  }
};
```

---

**IMPORTANTE**: Estas reglas son OBLIGATORIAS. Siempre validar antes de crear cualquier componente o pantalla. En caso de duda, seguir los templates y consultar `DEVELOPMENT_RULES.md`. 